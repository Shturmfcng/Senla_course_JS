'use strict';
//! ВЫРАЖЕНИЯ И ОПЕРАТОРЫ. ПРЕОБРАЗОВАНИЕ ТИПОВ.
//! 1. Записать в коротком виде:
/*
let a = a + 5;
let b = b * 15;
let c = c - 3;
let d = d % 2;
let k = a + k;
let l = l * b;
let m = m * 3 * k;
*/

let a = 0;
a += 5;

let b = 0;
b *= 15;

let c = 0;
c -= 3;

let d = 0;
d %= 2;

let k = 0;
k += a;

let l = 0;
l *= b;

let m = 0;
m *= 3 * k;

//! 2. Возвести переменную в куб, используя краткую запись.
let num1 = 5, num2 = 5;
// 1-ый вариант:
num1 **= 3;

// 2-ой вариант: 
num2 = Math.pow(num2, 3);

//! 3. Если переменная равна “маленький”, присвоить ей значение “большой”, иначе “маленький”. Сделать тоже самое, используя тернарный оператор.
let size;
if (size === "маленький") {
	size = "большой";
} else {
	size = "маленький";
};
console.log (size); // маленький

(size === "маленький") ? (size = "большой") : (size = "маленький");
console.log (size); // большой

//! 4. Записать условие, используя условный оператор if: если переменная меньше нуля: присвоить ей строку “меньше нуля” если переменная равна нулю: присвоить 1 если больше нуля: используя краткую запись, умножить переменную на 10 Сделать тоже самое, используя тернарный оператор.
let num = 0;
if (num < 0) {
	num = "меньше нуля";
} else if (num === 0) {
	num = 1;
} else {
	num *= 10;
};
console.log (num); // 1

(num < 0) ? (num = "меньше нуля") : (num === 0) ? (num = 1) : (num *= 10);
console.log (num); // 10

//! 5. Используя конструктор switch, записать следующее условие:
/*
if(a == 'котик') {
  console.log('котик');
} else if(a == 'собака') {
  console.log('собака');
} else if(a == 'хомячок') {
  console.log('хомячок');
} else {
  console.log('неизвестное науке животное');
}

Важно: в консоли вы должны увидеть только одно условие из 4х.
*/

let pet = "котик";
switch (pet) {
  case "котик":
    console.log("котик");
    break;
  case "собака":
    console.log("собака");
    break;
  case "хомячок":
    console.log("хомячок");
    break;
  default:
    console.log("неизвестное науке животное");
};

//! 6. Чему равен x в каждом из примеров, объясните почему:
let x;
// "ИЛИ" ищет "true" и когда находит - возвращает значение, если не находит "true", то возвращает последний "false"
// "И" ищет "false" и когда находит - возвращает значение, если не находит "false", то возвращает последний "true"
x = 0 || 'строка'; // false / true, значит х = 'строка' (первое истинное значение)
x = 1 && 'строка'; // true / true, значит х = 'строка' (последнее истинное значение)
x = null || 1; // false / true, значит х = 1 (первое истинное значение)
x = null && 1; // false / true, значит х = null (первое ложное значение)
x = 1 && null; // true / false , значит х = null (первое ложное значение)
x = null || 0 || 1; // false / false / true, значит x = 1 (первое истинное значение)
x = null && 0 && 1; // false / false / true, значит x = null (первое ложное значение)

//! 7. Чему равен x в каждом из примеров, объясните почему:
x = 1 + 2 + '3'; // '33', (1 + 2 = 3; 3 + '3' = '33')
x = 1 + 2 - '1'; // 2, (1 + 2 = 3; 3 - '1' = 2)
x = '1' + 2 - 1; // 11, ('1' + 2 = '12'; '12' - 1 = 11)
// Операторы работают один за другим. При сложении со строкой другой операнд преобразуется в строку и происходит конкатенация (склеивание строк). При вычитании строки она преобразуется в число, если может, иначе будет NaN
x = true + 1; // 2, (1 + 1 = 2)
x = null + 2; // 2, (0 + 2)
// true и null в арифметических операциях преобразуются к числам, в 1 и 0 соответственно
x = +'1' + 2; // 3, (1 + 2 = 3)
// Унарный плюс преобразует не числовой операнд к числу, поэтому '1' преобразуется в 1
x = undefined + 2; // NaN
x = true + undefined; // NaN
// При использовании undefined в качестве операнда в арифметических операциях, таких как сложение, умножение и т д. мы получаем NaN